version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 80 of the container to port 8080 on the host
      # Access the application at http://localhost:8080
      - "8080:80"
    volumes:
      # Mount the frontend directory
      - ./frontend/src:/usr/share/nginx/html
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
      
  transaction_verification:
    build:
      context: ./

      dockerfile: ./verification_service/Dockerfile
    ports:
      - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/verification_service/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./verification_service/src:/app/verification_service/src
      
  suggestion_service:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./suggestion_service/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/suggestion_service/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./suggestion_service/src:/app/suggestion_service/src

  queue_service:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./queue_service/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50054:50054
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/queue_service/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./queue_service/src:/app/queue_service/src


  order_executor:
    build:
      context: ./
      dockerfile: ./executor_service/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./executor_service/src:/app/executor_service/src
    deploy:
      replicas: 2  # Run 2 instances of the service
      restart_policy:
        condition: on-failure

  payment:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./payment/Dockerfile
    ports:
      # Expose port 50055 on the host, and map port 50055 of the container to port 50055 on the host
      - 50056:50056
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/payment/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./payment/src:/app/payment/src
  #database:
    #build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
    #  context: ./
      # Use the Dockerfile in the fraud_detection directorys
    #  dockerfile: ./database/Dockerfile
      # Expose port 50055 on the host, and map port 50055 of the container to port 50055 on the host
    #environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
    #  - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
    #  - PYTHONFILE=/app/database/src/app.py
    #volumes:
    #  # Mount the utils directory in the current directory to the /app/utils directory in the container
    #  - ./utils:/app/utils
    #  # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
    #  - ./database/src:/app/database/src
    #deploy:
    #  replicas: 3  # Run 2 instances of the service
    #  restart_policy:
    #    condition: on-failure
    #ports:
    #  - "50057"

  
  database_head:
    build:
      context: ./
      dockerfile: ./database/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/database/src/app.py
      - ROLE=database_head
    volumes:
      - ./utils:/app/utils
      - ./database/src:/app/database/src
    ports:
      - "50057:50057"

  database_mid:
    build:
      context: ./
      dockerfile: ./database/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/database/src/app.py
      - ROLE=database_mid
    volumes:
      - ./utils:/app/utils
      - ./database/src:/app/database/src
    ports:
      - "50058:50057"

  database_tail:
    build:
      context: ./
      dockerfile: ./database/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/database/src/app.py
      - ROLE=database_tail
    volumes:
      - ./utils:/app/utils
      - ./database/src:/app/database/src
    ports:
      - "50059:50057"

  observability:
      image: grafana/otel-lgtm
      ports:
        - "3000:3000"
        - "4317:4317"
        #- "4318:4318"
        - "3200:3200"
        #- "8888:8888"
        - "9090:9090"
      environment:
        - OTEL_METRIC_EXPORT_INTERVAL=1000