# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import database_pb2 as database__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in database_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BooksDatabaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_unary(
                '/database.BooksDatabase/Read',
                request_serializer=database__pb2.ReadRequest.SerializeToString,
                response_deserializer=database__pb2.ReadResponse.FromString,
                _registered_method=True)
        self.Write = channel.unary_unary(
                '/database.BooksDatabase/Write',
                request_serializer=database__pb2.WriteRequest.SerializeToString,
                response_deserializer=database__pb2.WriteResponse.FromString,
                _registered_method=True)
        self.DecrementStock = channel.unary_unary(
                '/database.BooksDatabase/DecrementStock',
                request_serializer=database__pb2.DecrementStockRequest.SerializeToString,
                response_deserializer=database__pb2.DecrementStockResponse.FromString,
                _registered_method=True)
        self.IncrementStock = channel.unary_unary(
                '/database.BooksDatabase/IncrementStock',
                request_serializer=database__pb2.IncrementStockRequest.SerializeToString,
                response_deserializer=database__pb2.IncrementStockResponse.FromString,
                _registered_method=True)
        self.Prepare = channel.unary_unary(
                '/database.BooksDatabase/Prepare',
                request_serializer=database__pb2.PrepareRequest.SerializeToString,
                response_deserializer=database__pb2.PrepareResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/database.BooksDatabase/Commit',
                request_serializer=database__pb2.CommitRequest.SerializeToString,
                response_deserializer=database__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.Abort = channel.unary_unary(
                '/database.BooksDatabase/Abort',
                request_serializer=database__pb2.AbortRequest.SerializeToString,
                response_deserializer=database__pb2.AbortResponse.FromString,
                _registered_method=True)
        self.IsHead = channel.unary_unary(
                '/database.BooksDatabase/IsHead',
                request_serializer=database__pb2.IsHeadRequest.SerializeToString,
                response_deserializer=database__pb2.IsHeadResponse.FromString,
                _registered_method=True)
        self.IsTail = channel.unary_unary(
                '/database.BooksDatabase/IsTail',
                request_serializer=database__pb2.IsTailRequest.SerializeToString,
                response_deserializer=database__pb2.IsTailResponse.FromString,
                _registered_method=True)


class BooksDatabaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecrementStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IncrementStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsHead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsTail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BooksDatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=database__pb2.ReadRequest.FromString,
                    response_serializer=database__pb2.ReadResponse.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=database__pb2.WriteRequest.FromString,
                    response_serializer=database__pb2.WriteResponse.SerializeToString,
            ),
            'DecrementStock': grpc.unary_unary_rpc_method_handler(
                    servicer.DecrementStock,
                    request_deserializer=database__pb2.DecrementStockRequest.FromString,
                    response_serializer=database__pb2.DecrementStockResponse.SerializeToString,
            ),
            'IncrementStock': grpc.unary_unary_rpc_method_handler(
                    servicer.IncrementStock,
                    request_deserializer=database__pb2.IncrementStockRequest.FromString,
                    response_serializer=database__pb2.IncrementStockResponse.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=database__pb2.PrepareRequest.FromString,
                    response_serializer=database__pb2.PrepareResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=database__pb2.CommitRequest.FromString,
                    response_serializer=database__pb2.CommitResponse.SerializeToString,
            ),
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=database__pb2.AbortRequest.FromString,
                    response_serializer=database__pb2.AbortResponse.SerializeToString,
            ),
            'IsHead': grpc.unary_unary_rpc_method_handler(
                    servicer.IsHead,
                    request_deserializer=database__pb2.IsHeadRequest.FromString,
                    response_serializer=database__pb2.IsHeadResponse.SerializeToString,
            ),
            'IsTail': grpc.unary_unary_rpc_method_handler(
                    servicer.IsTail,
                    request_deserializer=database__pb2.IsTailRequest.FromString,
                    response_serializer=database__pb2.IsTailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'database.BooksDatabase', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('database.BooksDatabase', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BooksDatabase(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/Read',
            database__pb2.ReadRequest.SerializeToString,
            database__pb2.ReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/Write',
            database__pb2.WriteRequest.SerializeToString,
            database__pb2.WriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DecrementStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/DecrementStock',
            database__pb2.DecrementStockRequest.SerializeToString,
            database__pb2.DecrementStockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IncrementStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/IncrementStock',
            database__pb2.IncrementStockRequest.SerializeToString,
            database__pb2.IncrementStockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/Prepare',
            database__pb2.PrepareRequest.SerializeToString,
            database__pb2.PrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/Commit',
            database__pb2.CommitRequest.SerializeToString,
            database__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/Abort',
            database__pb2.AbortRequest.SerializeToString,
            database__pb2.AbortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsHead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/IsHead',
            database__pb2.IsHeadRequest.SerializeToString,
            database__pb2.IsHeadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsTail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.BooksDatabase/IsTail',
            database__pb2.IsTailRequest.SerializeToString,
            database__pb2.IsTailResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
